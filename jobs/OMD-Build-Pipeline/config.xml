<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.16">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.3.5">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/OMD-Build-Pipeline</mappedUrl>
        <modelObject class="flow-definition" reference="../../../.."/>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.2.5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.2.5">
      <jobProperties/>
      <triggers/>
      <parameters/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.BooleanParameterDefinition>
          <name>AcceptBeforeLoad</name>
          <description></description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>WSName</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SnapshotName</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>team_scm_fetchDestination</name>
          <description></description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>DebugBuildNode</name>
          <description></description>
          <allowedSlaves/>
          <defaultSlaves/>
          <triggerIfResult>multiSelectionDisallowed</triggerIfResult>
          <allowMultiNodeSelection>false</allowMultiNodeSelection>
          <triggerConcurrentBuilds>false</triggerConcurrentBuilds>
          <ignoreOfflineNodes>false</ignoreOfflineNodes>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition>
        <org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition plugin="nodelabelparameter@1.7.2">
          <name>ReleaseBuildNode</name>
          <description></description>
          <allowedSlaves/>
          <defaultSlaves/>
          <triggerIfResult>multiSelectionDisallowed</triggerIfResult>
          <allowMultiNodeSelection>false</allowMultiNodeSelection>
          <triggerConcurrentBuilds>false</triggerConcurrentBuilds>
          <ignoreOfflineNodes>false</ignoreOfflineNodes>
          <nodeEligibility class="org.jvnet.jenkins.plugins.nodelabelparameter.node.AllNodeEligibility"/>
        </org.jvnet.jenkins.plugins.nodelabelparameter.NodeParameterDefinition>
        <hudson.model.ChoiceParameterDefinition>
          <name>BuildModes</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>Debug</string>
              <string>Release</string>
              <string>Debug,Release</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.42">
    <script>pipeline {
    agent none
    environment { 
        repositoryAddress=&apos;http://clm.kla-tencor.com/ccm&apos;
        load &quot;$JENKINS_HOME/.envvars/stacktest-staging.groovy&quot;
    }
    stages {
        stage(&apos;checkout RTC&apos;) {
            parallel {
                stage(&apos;Debug code load&apos;) {
                    when { expression { params.BuildModes =~ /Debug/ }}
                    agent {
                        node &quot;$DebugBuildNode&quot;
                    }
                    steps {
                        teamconcert ([
							 buildType: [
										value:&apos;buildWorkspace&apos;, 
										buildWorkspace: params.WSName, 
										acceptBeforeLoad:params.AcceptBeforeLoad,
										clearLoadDirectory:true, 
										createFoldersForComponents:true, 
										customizedSnapshotName:params.SnapshotName, 
										loadDirectory:params.team_scm_fetchDestination,
										changelog:true
										]
									])
                    }
                    post {
                        always {
                            bat &apos;scm delete snapshot -r $repositoryAddress -u omdbuild -P Scm07^&amp; -v $WSName $SnapshotName&apos;
                        }
                    }
                }
                stage(&apos;Release code load&apos;) {
                    when { expression { params.BuildModes =~ /Release/ }}
                    agent {
                        node &quot;$ReleaseBuildNode&quot;
                    }
                    steps {
                        teamconcert ([
							 buildType: [
										value:&apos;buildWorkspace&apos;, 
										buildWorkspace: params.WSName, 
										acceptBeforeLoad:params.AcceptBeforeLoad,
										clearLoadDirectory:true, 
										createFoldersForComponents:true, 
										customizedSnapshotName:params.SnapshotName, 
										loadDirectory:params.team_scm_fetchDestination,
										changelog:true
										]
									])
                    }
                    post {
                        always {
                            bat &apos;scm delete snapshot -r $repositoryAddress -u omdbuild -P Scm07^&amp; -v $WSName $SnapshotName&apos;
                        }
                    }
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>