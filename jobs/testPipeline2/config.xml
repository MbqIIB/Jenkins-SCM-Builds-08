<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.16">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.3.5">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/testPipeline2</mappedUrl>
        <modelObject class="flow-definition" reference="../../../.."/>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.2.5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.2.5">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>TestsArray</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.42">
    <script>pipeline {
agent { node { label &apos;master&apos; } }
parameters {
        string(defaultValue: &quot;[]&quot;, description: &apos;What tests needs to run and in which confgurations? \n example: [test1:pipe,test2:pipe,test3:pipe]&apos;, name: &apos;TestsArray&apos;)
    }
    stages {
        stage (&quot;Run tests&quot;){
            
            steps{
                script{
                print params.TestsArray
                def stringMap= params.TestsArray.replaceAll(&apos;\\[|\\]&apos;,&apos;&apos;)
                def newMap = [:]
                stringMap.tokenize(&apos;,&apos;).each {
                kvTuple = it.tokenize(&apos;:&apos;)
                newMap[kvTuple[0]] = kvTuple[1]
                print &quot;newMap=&quot;+newMap
                runparalleltests(newMap)
                }
                }
                
            }
        }
    }

}
// in this array we&apos;ll place the jobs that we wish to run
def runparalleltests(AUT_Tests){
def tests = [:]
//print &quot;params.TestsArray&quot;+params.TestsArray
//running the job 4 times concurrently
//the dummy parameter is for preventing mutation of the parameter before the execution of the closure.
//we have to assign it outside the closure or it will run the job multiple times with the same parameter &quot;4&quot;
//and jenkins will unite them intgetInstanceo a single run of the job
  //AUT_Tests=(params.TestsArray).toMapString()
//for (int i = 0; i &lt; AUT_Tests.size(); i++) {
def i=0
AUT_Tests.each{    
 //def index = i //if we tried to use i below, it would equal 4 in each job execution.
 print it.value
    print it.key
  tests[&quot;test${i}&quot;] = {
//Parameters:
//param1 : an example string parameter for the triggered job.
//dummy: a parameter used to prevent triggering the job with the same parameters value.
//this parameter has to accept a different value each time the job is triggered.
//def value=it.value
//def jobname=it.key
    build job:it.key,parameters: [
      string(name: &apos;name&apos;, value:&apos;test_param&apos;),
      [$class: &apos;NodeParameterValue&apos;, name: &apos;node&apos;, labels: [it.value], nodeEligibility: [$class: &apos;AllNodeEligibility&apos;]]]
  }
  i++
}
parallel tests
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>