<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.16">
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.42">
    <script>
for (aSlave in hudson.model.Hudson.instance.slaves) {
  // check if executor is dead
  execList = aSlave.getComputer().getExecutors()     
    print (&quot;Number of free executers: &quot; + aSlave.getComputer().getExecutors().countExecutors())
    print (&quot;Number of executers: &quot; +aSlave.getComputer().getExecutors().getNumExecutors())
    print (&quot;Number of occupied/dead executers: &quot;+aSlave.getComputer().getExecutors().getNumExecutors() - aSlave.getComputer().getExecutors().countExecutors())
  /**for( exec in execList ) {
    if (exec.getCauseOfDeath()) {
      println(&quot;\tSlave ${aSlave.name} has a dead executor.&quot;)
      println(&quot;Error:&quot;)
      exec.getCauseOfDeath().printStackTrace(out) 
      println(&apos;\n&apos;)
      println(&quot;\tRemoving Dead Executor.&quot;)
      exec.doYank()
    }
  }**/ 
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>