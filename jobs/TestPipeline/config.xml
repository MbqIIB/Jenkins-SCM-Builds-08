<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.16">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.3.5">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/TestPipeline</mappedUrl>
        <modelObject class="flow-definition" reference="../../../.."/>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.42">
    <script>
def runTestPerConfiguration(test,configuration) {
    return {
        static{
        print 00
        def labelNodes = Jenkins.instance.getLabel(configuration)
        def nodes = labelNodes.getNodes()
        def nodeName=null
        print 11
       // if (nodes.size() &gt; 0) {
         //   result[role] = nodes[0].getNodeName()
        //}
        while(nodeName==null){
            print 22
         for (node in nodes) {
             print 33
             print (&quot;nodeNAme=&quot;+nodeName)
            if (nodeName != null)
                break
            print (&quot;node=&quot;+node.getNodeName())
             if (!node.getComputer().isOffline()){ 
                 print 44
                 print node.getComputer().getNumExecutors()
                 print node.getComputer().countBusy()
                if (node.getComputer().getNumExecutors()-node.getComputer().countBusy() &gt;0){
                    print 55 +node.getNodeName()
                    nodeName=node.getNodeName()
                    continue;
                }
             }
         }
        }
        print 66
        node (nodeName) { 
        wrap([$class: &apos;TimestamperBuildWrapper&apos;]) {
        print test +&quot; . . . . . &quot;+ configuration
        build job:test , parameters: [[$class: &apos;LabelParameterValue&apos;, name: &apos;node&apos;, label: configuration]]
        } }} // ts / node
    } // closure
} // runTestPerConfiguration

stage(&quot;Run ATE tests&quot;) {
  AUT_Tests=[&apos;test1&apos;:&apos;Matlab&apos;,&apos;test2&apos;:&apos;Matlab&apos;,&apos;test3&apos;:&apos;Matlab&apos;]
  stepsForParallel = [:]
  AUT_Tests.each{
      def test_suit=it.key
      def configuration = it.value
      def stepName = &quot;Test ${test_suit} for ${configuration}&quot;
      print stepName
      stepsForParallel[stepName] = runTestPerConfiguration(test_suit,configuration)
  }
  stepsForParallel[&apos;failFast&apos;] = false
  parallel stepsForParallel
} // stage</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>