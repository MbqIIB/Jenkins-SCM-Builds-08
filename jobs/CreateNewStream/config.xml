<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.16">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.3.5">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/CreateNewStream</mappedUrl>
        <modelObject class="flow-definition" reference="../../../.."/>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.2.5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.2.5">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>SuggestedStreamName</string>
        <string>SourceStreamSnapshotName</string>
        <string>SourceStreamName</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SourceStreamSnapshotName</name>
          <description>What is the snapshot name you would use as a base for the new stream?</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SourceStreamName</name>
          <description>What is the base stream name?</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SuggestedStreamName</name>
          <description>What should the new stream be named with? 
 Prefered syntax:Arhcer_bla_bla_bla</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.42">
    <script>pipeline {
    agent { node { label &apos;master&apos; } }
     parameters {
        string(name: &apos;SourceStreamSnapshotName&apos;, defaultValue: &apos;&apos;, description: &apos;What is the snapshot name you would use as a base for the new stream?&apos;)
        string(name: &apos;SourceStreamName&apos;, defaultValue: &apos;&apos;, description: &apos;What is the base stream name?&apos;)
        string(name: &apos;SuggestedStreamName&apos;, defaultValue: &apos;&apos;, description: &apos;What should the new stream be named with? \n Prefered syntax:Arhcer_bla_bla_bla&apos;)
    }
        stages {
    			stage (&apos;verify&apos;) {
    				steps {
    				    script {
    					 print &apos;verify suggested stream name is not occupied&apos;
    					if (getCommandOutput(&quot;scm list stream -r http://clm.kla-tencor.com/ccm -u omdbuild -P Scm07^&amp; -n ${params.SuggestedStreamName}&quot;) !=&quot;&quot;){
    						error &apos;Stream name &apos;+params.SuggestedStreamName+&apos; is already occupied&apos;
    					}
    					print &apos;verify source stream name&apos;
    					if (getCommandOutput(&quot;scm list stream -r http://clm.kla-tencor.com/ccm -u omdbuild -P Scm07^&amp; -n ${params.SourceStreamName}  -m 1&quot;) == &quot;&quot;) {
     
    						error &apos;Invalid source stream name &apos; + params.SourceStreamName
    					}
    					print &apos;verify suggested stream snapshot&apos;
    					if (getCommandOutput(&quot;scm list snapshots -r http://clm.kla-tencor.com/ccm -u omdbuild -P Scm07^&amp; -n ${params.SourceStreamSnapshotName} -m 1&quot;) == &quot;&quot;){ 
    						error &apos;Invalid source stream snapshot name &apos; + params.SourceStreamSnapshotName
    					}
    				    }
    				}
    			}
    			stage (&apos;approve&apos;) {
    			 steps {
    			     script {
    				 def env.userInput = input(
    				 id: &apos;userInput&apos;, message: &apos;Let\&apos;s create it?&apos;, parameters: [
    				 [$class: &apos;StringParameterDefinition&apos;, defaultValue: params.SuggestedStreamName, description: &apos;new stream name&apos;, name: &apos;userInput&apos;]
    				])
    				echo (&quot;Creating Stream:&quot;+ env.userInput)
    			     }
    			 }
    			}
    			stage (&apos;create&apos;) {
                    steps {
                        script {
    				        echo &quot;scm create stream -r http://clm.kla-tencor.com/ccm -u omdbuild -p Scm07^&amp; -n ${env.userInput}&quot;
                        }
                    }
    			}
    		}

}

def getCommandOutput(cmd){
    stdout = bat(returnStdout:true , script: cmd).trim()
    result = stdout.readLines().drop(1).join(&quot; &quot;)       
    echo (&quot;results=&quot; + result)
    return result
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>