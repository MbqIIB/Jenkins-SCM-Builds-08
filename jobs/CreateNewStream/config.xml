<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.16">
  <actions>
    <io.jenkins.blueocean.service.embedded.BlueOceanUrlAction plugin="blueocean-rest-impl@1.3.5">
      <blueOceanUrlObject class="io.jenkins.blueocean.service.embedded.BlueOceanUrlObjectImpl">
        <mappedUrl>blue/organizations/jenkins/CreateNewStream</mappedUrl>
        <modelObject class="flow-definition" reference="../../../.."/>
      </blueOceanUrlObject>
    </io.jenkins.blueocean.service.embedded.BlueOceanUrlAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.2.5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.2.5">
      <jobProperties/>
      <triggers/>
      <parameters>
        <string>SuggestedStreamName</string>
        <string>SourceStreamSnapshotName</string>
        <string>SourceStreamName</string>
      </parameters>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.7.3">
      <useBuildBlocker>false</useBuildBlocker>
      <blockLevel>GLOBAL</blockLevel>
      <scanQueueFor>DISABLED</scanQueueFor>
      <blockingJobs></blockingJobs>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>30</daysToKeep>
        <numToKeep>-1</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty plugin="build-failure-analyzer@1.19.0">
      <doNotScan>false</doNotScan>
    </com.sonyericsson.jenkins.plugins.bfa.model.ScannerJobProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.27">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SuggestedStreamName</name>
          <description>What should the new stream be named with? 
 Prefered syntax:Arhcer_bla_bla_bla</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SourceStreamName</name>
          <description>What is the base stream name?</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SourceStreamSnapshotName</name>
          <description>What is the snapshot name you would use as a base for the new stream?</description>
          <defaultValue></defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.0.1">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.42">
    <script>import org.jenkinsci.plugins.builduser.BuildUser
pipeline {
    agent { node { label &apos;master&apos; } }
     parameters {
        string(name: &apos;SuggestedStreamName&apos;, defaultValue: &apos;&apos;, description: &apos;What should the new stream be named with? \n Prefered syntax:Arhcer_bla_bla_bla&apos;)
        string(name: &apos;SourceStreamName&apos;, defaultValue: &apos;&apos;, description: &apos;What is the base stream name?&apos;)
        string(name: &apos;SourceStreamSnapshotName&apos;, defaultValue: &apos;&apos;, description: &apos;What is the snapshot name you would use as a base for the new stream?&apos;)
    }
    environment {
        search_snaposhots_cmd=&quot;scm list snapshots -r http://clm.kla-tencor.com/ccm -u omdbuild -P Scm07^&amp; -n ${params.SourceStreamSnapshotName}&quot;
        search_source_stream_cmd=&quot;scm list stream -r http://clm.kla-tencor.com/ccm -u omdbuild -P Scm07^&amp; -n ${params.SourceStreamName}&quot;
        search_target_stream_cmd=&quot;scm list stream -r http://clm.kla-tencor.com/ccm -u omdbuild -P Scm07^&amp; -n ${params.SuggestedStreamName}&quot;
    }
        stages {
    			stage (&apos;verify&apos;) {
    				steps {
        				    script {
                                wrap([$class: &apos;BuildUser&apos;]) {
            				        currentBuild.description = &quot;New stream named &apos;${params.SuggestedStreamName}&apos; requested by &apos;${env.BUILD_USER}&apos;&quot;
                                }
        				        
    	    					print &apos;verify suggested stream name is not occupied&apos;
    						    switch(searchStrInCommandOutput(search_target_stream_cmd,params.SuggestedStreamName) &gt;= 1){
    						        case 1..Integer.MAX_VALUE :
    							       throw new Exception(&quot;Stream name &quot; + params.SuggestedStreamName + &quot; is already occupied&quot;)
                                    default:
                                        print &apos;suggested stream name is free&apos;
    						    }
    						    
    	    					print &apos;verify source stream name&apos;
    	    					switch(searchStrInCommandOutput(search_source_stream_cmd,params.SourceStreamName)){
    	    					    case 2..Integer.MAX_VALUE :
    	    						        throw new Exception(&apos;Multi stream with prefix &apos; + params.SourceStreamName)
    	    					    case Integer.MIN_VALUE+2..0 :
    	    						        throw new Exception( &apos;Invalid source stream name &apos;  + params.SourceStreamName)
    	                            default:
    	                                print &apos;source stream name is verified&apos;
    	    					}
    	    					
    	    					print &apos;verify suggested stream snapshot&apos;
    	        				switch(searchStrInCommandOutput(search_snaposhots_cmd,params.SourceStreamSnapshotName)){
    	        				    case 2..Integer.MAX_VALUE :
    	                                    throw new Exception(&quot;Multi snapshots with prefix &quot;+params.SourceStreamSnapshotName)
    	                            case Integer.MIN_VALUE+2..0 :
    	        						    throw new Exception(&apos;Invalid snapshot name: &apos;+params.SourceStreamSnapshotName+&apos; for stream: &apos; +params.SourceStreamName)
                                    default:    
    					                    print &apos;snapshot name is verified&apos;
                                }   
        				    }
    				}
    			}
    			stage (&apos;approve&apos;) {
    			 steps {
    			     script {
    			         def userInput
    			         try{
    			             mail (to: &apos;adham.saffori@kla-tencor.com&apos;,
                                 subject: &quot;New stream request with name  &apos;${params.SuggestedStreamName}&apos; is waiting for your approval&quot;,
                                 body: &quot;Please go to ${env.BUILD_URL}pipeline.&quot;);
            			    userInput = input(
            				 id: &apos;userInput&apos;, message: &apos;Please approve the below stream name?&apos;, parameters: [
            				 [$class: &apos;StringParameterDefinition&apos;, defaultValue: params.SuggestedStreamName, description: &apos;new stream name&apos;, name: &apos;userInput&apos;]
            				],submitter: &apos;DL-OMD-ENG-SCM&apos;,ok: &apos;Approved, lets create it&apos;)
            				print (userInput)
            				print (userInput[&apos;declineReason&apos;])
    			         }catch(err) { // input false
                            userInput = input(
            				 id: &apos;userInput&apos;, message: &apos;Please update abortion reason?&apos;, parameters: [
            				[$class: &apos;TextParameterDefinition&apos;, defaultValue: &apos;&apos;, description: &apos;Decline reason&apos;, name: &apos;declineReason&apos;]]
            				,submitter: &apos;DL-OMD-ENG-SCM&apos;,ok: &apos;Email user, close request&apos;)
                            def user = err.getCauses()[0].getUser()
                            echo &quot;Aborted by: [${user}]&quot;
                            echo &quot;Abort reason: &quot;+ userInput
                            //throw new Exception( &quot;Abort reason: &quot;+ userInput)
                            wrap([$class: &apos;BuildUser&apos;]) {
                                emailext (
                                    subject: &quot;Declined: Stream creation request ${params.SuggestedStreamName}&apos;&quot;,
                                    body: &quot;&quot;&quot;&lt;p&gt;Reason: &apos;${user}&apos;&lt;/p&gt;
                                    &lt;p&gt;Reason: &apos;${userInput}&apos;&lt;/p&gt;
                                    &lt;p&gt;For execution details, please check console output at &quot;&lt;a href=&quot;${env.BUILD_URL}&quot;&gt;${env.JOB_NAME} [${env.BUILD_NUMBER}]&lt;/a&gt;&quot;&lt;/p&gt;&quot;&quot;&quot;,
                                     to: &quot;${BUILD_USER_EMAIL}&quot;
                                )
                            }
                        }
                        print (userInput)
    				if (!params.SuggestedStreamName.equals(userInput[&apos;userInput&apos;])){ 
    				        print &apos;verify new suggested stream name is not occupied &apos;+ userInput[&apos;userInput&apos;]
						    switch(searchStrInCommandOutput(search_target_stream_cmd,params.SuggestedStreamName) &gt;= 1){
						        case 1..Integer.MAX_VALUE :
							       throw new Exception(&quot;Stream name &quot; + userInput[&apos;userInput&apos;] + &quot; is already occupied&quot;)
                                default:
                                    print &apos;new suggested stream name is free&apos;
						    }
    			     }
    			 }
    			}
    			}
    			stage (&apos;create&apos;) {
                    steps {
                        script {
    				        echo &quot;scm create stream -r http://clm.kla-tencor.com/ccm -u omdbuild -p Scm07^&amp; -n ${userInput[&apos;userInput&apos;]} ${params.SourceStreamName}&quot;
                        }
                    }
    			}

    }
}

def searchStrInCommandOutput(cmd,str){
    stdoutput = bat(returnStdout:true , script:cmd).trim()
    //print (&quot;stdout=&quot; + stdout)
    result = stdoutput.readLines().drop(1).join(&quot; &quot;)
    //print (&quot;count=&quot; +result.count(str))
    return result.count(str)
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>